---
title: "Client Report - The War with Star Wars"
subtitle: "Course DS 250"
author: "Carson Aller"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
from lets_plot import *
# add the additional libraries you need to import for ML here

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
df = pd.read_csv("StarWars.csv", encoding='ISO-8859-1')

```

## Elevator pitch
I believe the most important thing on this project is cleaning up the data. Just showing unnessesary columns and data is important to get rid of. 



## QUESTION|TASK 1

__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. 

I took away the unnamed colunms names to make it look more tidy. 

```{python}
# Include and execute your code here
df.columns = df.columns.str.replace( 'Unnamed: \d+', '', regex=True).str.strip()





df.head(2000)
```


## QUESTION|TASK 2

__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  
    a. Filter the dataset to respondents that have seen at least one film  
    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  
    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  
    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  
    a. Create your target (also known as “y” or “label”) column based on the new income range column  
    a. One-hot encode all remaining categorical columns   

I simplified all the options to one or the other. Makes it one answer instead of other options. 

```{python}
# Include and execute your code here
# Filter based on one column
df_filtered = df[df["Have you seen any of the 6 films in the Star Wars franchise?"] == "Yes"].copy()

df_filtered.head(2000)

```

```{python}
# Include and execute your code here

df_filtered['Age'] = df_filtered['Age'].replace({
  '18-29':24,
  '30-44':35,
  '45-60':50,
  '> 60':61
} )

df_filtered.head(2000)

```

```{python}
# Include and execute your code here
df_filtered ['Education'] = df_filtered['Education'].replace({
  'Less than high school degree':1,
  'High school degree':2, 
'Some college or Associate degree':3,
 'Bachelor degree':4,
 'Graduate degree':5})
df_filtered.head(2000)
```

```{python}
# Include and execute your code here
df_filtered['Household Income'] = df_filtered ['Household Income'].replace({
 '$0 - $24,999':10000, 
 '$25,000 - $49,999':35000,
 '$50,000 - $99,999':75000,
 '$100,000 - $149,999':125000})
df_filtered.head(2000)

```

```{python}
# Include and execute your code here
# Convert 'Household Income' to numeric values, then assign to 'Income'
income_map = {
    '$0 - $24,999': 10000,
    '$25,000 - $49,999': 35000,
    '$50,000 - $99,999': 75000,
    '$100,000 - $149,999': 125000
}
df_filtered['Income'] = df_filtered['Household Income'].map(income_map)
df_encoded = df_filtered.copy()

```

```{python}
# Include and execute your code here
df_encoded = (df_filtered)
df_filtered.head(2000)

df_filtered['Gender'] = df_filtered ['Gender'].replace({
 'Male': 0, 
 'Female':1})
df_filtered.head(2000)
```

## QUESTION|TASK 3

__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  

_type your results and analysis here_

```{python}

```

```{python}
# Include and execute your code here

```

## QUESTION|TASK 4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ 

I got 60.6%. I did this by using Age, Education, and Gender to find every attribute for a person that makes more than 50k. I used HighIncome and Income to help determine these factors. 

```{python}
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
df_encoded = (df_filtered)

df_encoded['HighIncome'] = (df_encoded['Income'] > 50000)

features = ['Age', 'Education', 'Gender'] 
X = df_encoded[features]
y = df_encoded['HighIncome']
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

model = RandomForestClassifier(random_state=1)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(accuracy)

```

---

## STRETCH QUESTION|TASK 1

__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__

I was able to get an accuracy of 65.3 taking out the gender.

```{python}
# Include and execute your code here
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
df_encoded = (df_filtered)

df_encoded['HighIncome'] = (df_encoded['Income'] > 50000)

features = ['Age', 'Education'] 
X = df_encoded[features]
y = df_encoded['HighIncome']
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

model = RandomForestClassifier(random_state=1)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(accuracy)
```




## STRETCH QUESTION|TASK 2

__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__

_type your results and analysis here_

```{python}


```


## STRETCH QUESTION|TASK 3

__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  

_type your results and analysis here_

```{python}
# Include and execute your code here


```

---
